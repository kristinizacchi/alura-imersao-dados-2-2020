# -*- coding: utf-8 -*-
"""AluraID_Aula01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mZd9Fdj8NUYzeKjBm964ICXLy7mfYAc7
"""

import pandas as pd
import pylab as pl

#  os dados completos foram retirados de http://download.inep.gov.br/microdados/microdados_enem_2019.zip
#  os arquivo csv usado é uma amostra do arquivo completo.

#  fonte = "/content/MICRODADOS_ENEM_2019_SAMPLE_43278.csv"
fonte = "https://github.com/alura-cursos/imersao-dados-2-2020/blob/master/MICRODADOS_ENEM_2019_SAMPLE_43278.csv?raw=true"

dados = pd.read_csv(fonte)
dados.head()

dados.shape

dados['SG_UF_RESIDENCIA']

dados.columns.values

dados[['SG_UF_RESIDENCIA','Q025']]

#  pegar todos os elementos encontrados na coluna
dados['SG_UF_RESIDENCIA'].unique()

# conta quantos elementos sem repetição
len(dados['SG_UF_RESIDENCIA'].unique())

# conta quantas vezes cada elemento aparece, neste caso quantas pessoas por estado
dados['SG_UF_RESIDENCIA'].value_counts()

# conta quantas vezes cada elemento aparece, neste caso quantas pessoas por idade
dados['NU_IDADE'].value_counts()

# conta quantas vezes cada elemento aparece, neste caso quantas pessoas por idade e ordena de forma crescente por idade
dados['NU_IDADE'].value_counts().sort_index()

"""---


Desafio 01: Fazer a proporção de inscritos por idade.


Desafio 02: Descobrir de quais estados são os inscritos com 13 anos.


---
"""

# Desafio 01
((dados['NU_IDADE'].value_counts()/dados['NU_IDADE'].count())*100).sort_index()

# Desafio 02
dados.query("NU_IDADE == 13")["SG_UF_RESIDENCIA"].value_counts()

#  Visualização
dados['NU_IDADE'].hist()

#  Visualização com aumento do range X e definição do tamanho da imagem
dados['NU_IDADE'].hist(bins = 20, figsize = (10,8))

"""---
Desafio 03: Colocar o título no gráfico


---
"""

#  Desafio 03
pl.suptitle("Quantidade de inscritos por idade - ENEM 2019")
pl.xlabel('Idade')
pl.ylabel('Quantidade de inscritos')
dados['NU_IDADE'].hist(bins = 20, figsize = (10,8))

#  trabalhar com os treineiros
dados['IN_TREINEIRO']

#  faz uma consulta com a condição que a coluna IN_TREINEIRO == 1 (ou seja, quando os inscritos são treineiros)
dados.query("IN_TREINEIRO == 1")["NU_IDADE"].value_counts().sort_index()

"""---
Desafio 04: Plotar os histogramas das idades dos treineiros e não treineiros


---
"""

#  Desafio 04
pl.suptitle("Quantidade de treineiros por idade - ENEM 2019")
pl.xlabel('Idade')
pl.ylabel('Quantidade de inscritos treineiros')
dados.query("IN_TREINEIRO == 1")['NU_IDADE'].hist(bins = 20, figsize = (10,8))

#  cont. Desafio 04
pl.suptitle("Quantidade de não treineiros por idade - ENEM 2019")
pl.xlabel('Idade')
pl.ylabel('Quantidade de inscritos não treineiros')
dados.query("IN_TREINEIRO == 0")['NU_IDADE'].hist(bins = 20, figsize = (10,8))

#  Histograma das notas de redação
pl.suptitle("Notas de Redação - ENEM 2019")
dados['NU_NOTA_REDACAO'].hist(bins = 20, figsize = (8, 6))

#  Histograma das notas de Linguagens e códigos
pl.suptitle("Notas de Linguagens e códigos - ENEM 2019")
dados['NU_NOTA_LC'].hist(bins = 20, figsize = (8, 6))

#  calcula a média do valor de uma coluna
pl.suptitle("Média das notas de Redação - ENEM 2019")
dados['NU_NOTA_REDACAO'].mean()

#  calcula o desvio padrão de uma coluna
pl.suptitle("Desvio padrão das notas de Redação - ENEM 2019")
dados['NU_NOTA_REDACAO'].std()

#  Variável (lista) para armazenar apenas os nomes das colunas que serão usadas para o describe
provas = ['NU_NOTA_CN', 'NU_NOTA_CH', 'NU_NOTA_MT', 'NU_NOTA_LC', 'NU_NOTA_REDACAO']

dados[provas].describe()

#  verifica a nota máximo dos 90% (0.9 do parâmetro) dos inscritos. Na verdade, o que se quer saber é qual o limite para os 10% com notas
#  mais altas.
dados["NU_NOTA_LC"].quantile(0.9)

#  verifica a nota dos 10% dos inscritos com nota mais baixa.
dados["NU_NOTA_LC"].quantile(0.1)

#  gráfico boxpot - diferenciar um valor único com base na média. 
#  A leitura do grafíco:
  #  A linha verde no retângulo é a mediana
  #  A maioria dos inscritos está com notas entre os 480 e 550 (retângulo no centro do gráfico)
  #  A bolinhas nos extremos são pessoas que tiraram as notas apontadas, mas que não estão entre a maioria
  #  os traços pretos são os quartis 25 e 75
pl.suptitle("Notas de Linguagens e Códigos - ENEM 2019")
dados["NU_NOTA_LC"].plot.box(grid = True, figsize=(8,6))

pl.suptitle("Quartis de notas de todas as áreas do conhecimento - ENEM 2019")
dados[provas].boxplot(grid = True, figsize = (10,8))

"""---
Desafio 05: Comparar as distribuições das provas de inglês (TP_LINGUA == 0) e de espanhol (TP_LINGUA == 1)

Desafio 06: Explorar a documentação do matplotlib e Pandas


---
"""

# Desafio 05
# notas quando a língua estrangeira é o Inglês
dados.query("TP_LINGUA == 0")[provas].describe()

pl.suptitle("Quartis de notas de todas as áreas do conhecimento - Língua Estrangeira: Inglês - ENEM 2019")
dados.query("TP_LINGUA == 0")[provas].boxplot(grid = True, figsize = (10,8))

# cont. Desafio 05
# notas quando a língua estrangeira é o Espanhol
dados.query("TP_LINGUA == 1")[provas].describe()

pl.suptitle("Quartis de notas de todas as áreas do conhecimento - Língua Estrangeira: Espanhol - ENEM 2019")
dados.query("TP_LINGUA == 1")[provas].boxplot(grid = True, figsize = (10,8))