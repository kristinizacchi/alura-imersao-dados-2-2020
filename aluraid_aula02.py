# -*- coding: utf-8 -*-
"""AluraID_Aula02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wLNZ50Yj4nUClA3mivYjvdI61_J-G_gT
"""

import pandas as pd
import pylab as pl

#  os dados completos foram retirados de http://download.inep.gov.br/microdados/microdados_enem_2019.zip
#  os arquivo csv usado é uma amostra do arquivo completo.

#  fonte = "/content/MICRODADOS_ENEM_2019_SAMPLE_43278.csv"
fonte = "https://github.com/alura-cursos/imersao-dados-2-2020/blob/master/MICRODADOS_ENEM_2019_SAMPLE_43278.csv?raw=true"

dados = pd.read_csv(fonte)
dados.head()

dados.columns.values

"""---


Desafio 01: Fazer a proporção de inscritos por idade.


Desafio 02: Descobrir de quais estados são os inscritos com 13 anos.


---
"""

# Desafio 01
((dados['NU_IDADE'].value_counts()/dados['NU_IDADE'].count())*100).sort_index()

# correção do desafio 01 - uso de normalize=True
dados['NU_IDADE'].value_counts(normalize=True)

# Desafio 02
dados.query("NU_IDADE == 13")["SG_UF_RESIDENCIA"].value_counts()

#  Visualização
dados['NU_IDADE'].hist()

"""---
Desafio 03: Colocar o título no gráfico


---
"""

#  Desafio 03
pl.suptitle("Quantidade de inscritos por idade - ENEM 2019")
pl.xlabel('Idade')
pl.ylabel('Quantidade de inscritos')
dados['NU_IDADE'].hist(bins = 20, figsize = (10,8))

#  trabalhar com os treineiros
dados['IN_TREINEIRO']

#  faz uma consulta com a condição que a coluna IN_TREINEIRO == 1 (ou seja, quando os inscritos são treineiros)
dados.query("IN_TREINEIRO == 1")["NU_IDADE"].value_counts().sort_index()

"""---
Desafio 04: Plotar os histogramas das idades dos treineiros e não treineiros


---
"""

#  Desafio 04
pl.suptitle("Quantidade de treineiros por idade - ENEM 2019")
pl.xlabel('Idade')
pl.ylabel('Quantidade de inscritos treineiros')
dados.query("IN_TREINEIRO == 1")['NU_IDADE'].hist(bins = 20, figsize = (10,8))

#  cont. Desafio 04
pl.suptitle("Quantidade de não treineiros por idade - ENEM 2019")
pl.xlabel('Idade')
pl.ylabel('Quantidade de inscritos não treineiros')
dados.query("IN_TREINEIRO == 0")['NU_IDADE'].hist(bins = 20, figsize = (10,8))

#  Histograma das notas de redação
pl.suptitle("Notas de Redação - ENEM 2019")
dados['NU_NOTA_REDACAO'].hist(bins = 20, figsize = (8, 6))

#  Histograma das notas de Linguagens e códigos
pl.suptitle("Notas de Linguagens e códigos - ENEM 2019")
dados['NU_NOTA_LC'].hist(bins = 20, figsize = (8, 6))

#  calcula a média do valor de uma coluna
pl.suptitle("Média das notas de Redação - ENEM 2019")
dados['NU_NOTA_REDACAO'].mean()

#  calcula o desvio padrão de uma coluna
pl.suptitle("Desvio padrão das notas de Redação - ENEM 2019")
dados['NU_NOTA_REDACAO'].std()

#  Variável (lista) para armazenar apenas os nomes das colunas que serão usadas para o describe
provas = ['NU_NOTA_CN', 'NU_NOTA_CH', 'NU_NOTA_MT', 'NU_NOTA_LC', 'NU_NOTA_REDACAO']

dados[provas].describe()

#  verifica a nota máximo dos 90% (0.9 do parâmetro) dos inscritos. Na verdade, o que se quer saber é qual o limite para os 10% com notas
#  mais altas.
dados["NU_NOTA_LC"].quantile(0.9)

#  verifica a nota dos 10% dos inscritos com nota mais baixa.
dados["NU_NOTA_LC"].quantile(0.1)

#  gráfico boxpot - diferenciar um valor único com base na média. 
#  A leitura do grafíco:
  #  A linha verde no retângulo é a mediana
  #  A maioria dos inscritos está com notas entre os 480 e 550 (retângulo no centro do gráfico)
  #  A bolinhas nos extremos são pessoas que tiraram as notas apontadas, mas que não estão entre a maioria
  #  os traços pretos são os quartis 25 e 75
pl.suptitle("Notas de Linguagens e Códigos - ENEM 2019")
dados["NU_NOTA_LC"].plot.box(grid = True, figsize=(8,6))

pl.suptitle("Quartis de notas de todas as áreas do conhecimento - ENEM 2019")
dados[provas].boxplot(grid = True, figsize = (10,8))

"""---
Desafio 05: Comparar as distribuições das provas de inglês (TP_LINGUA == 0) e de espanhol (TP_LINGUA == 1)

Desafio 06: Explorar a documentação do matplotlib e Pandas


---
"""

# Desafio 05
# notas quando a língua estrangeira é o Inglês
dados.query("TP_LINGUA == 0")[provas].describe()

pl.suptitle("Quartis de notas de todas as áreas do conhecimento - Língua Estrangeira: Inglês - ENEM 2019")
dados.query("TP_LINGUA == 0")[provas].boxplot(grid = True, figsize = (10,8))

# cont. Desafio 05
# notas quando a língua estrangeira é o Espanhol
dados.query("TP_LINGUA == 1")[provas].describe()

pl.suptitle("Quartis de notas de todas as áreas do conhecimento - Língua Estrangeira: Espanhol - ENEM 2019")
dados.query("TP_LINGUA == 1")[provas].boxplot(grid = True, figsize = (10,8))

"""---

**Aula 02**


---
"""

#  Quantidade de adolescentes menores de 15 anos por gênero 
dados.query("NU_IDADE <= 14")["TP_SEXO"].value_counts()

#  Quantidade de adolescentes menores de 15 anos por UF
dados.query("NU_IDADE <= 14")["SG_UF_RESIDENCIA"].value_counts()

#  Quantidade de adolescentes menores de 15 anos por UF
dados.query("NU_IDADE <= 14")["SG_UF_RESIDENCIA"].value_counts(normalize=True)

#  Quantidade de adolescentes menores de 15 anos por UF (não usar um gráfico de pizza, pois a visualização não é boa)
alunos_menor_quinze = dados.query("NU_IDADE <= 14")
alunos_menor_quinze["SG_UF_RESIDENCIA"].value_counts().plot.pie(figsize=(10,8))

pl.suptitle("Percentual de adolescentes menores de 15 anos por UF - ENEM 2019")
alunos_menor_quinze["SG_UF_RESIDENCIA"].value_counts(normalize=True).plot.bar(figsize=(10,8))

#  DESAFIO DO GUI: Aumentar a amostra para alunos menores de idade (até 17 anos) e comparar a proporção por UF

alunos_menor_idade = dados.query("NU_IDADE < 18")
alunos_menor_idade["SG_UF_RESIDENCIA"].value_counts(normalize=True).plot.bar(figsize=(10,8))

#  FIM DO DESAFIO DO GUI: SP apresenta o maior número de inscritos menores de 18 anos, quase o dobro de MG.

# DESAFIO EXTRA: 
pl.suptitle("Quantidade de adolescentes menores de 15 anos por gênero - ENEM 2019")
alunos_menor_quinze["TP_SEXO"].value_counts(normalize=True).plot.bar(figsize=(10,8))
#  dados.query("NU_IDADE <= 14")["TP_SEXO"].value_counts().plot.bar(figsize=(10,8))

#  Quantidades de pessoas que fazem a prova em UF diferente da própria residência
dados.query("SG_UF_RESIDENCIA != SG_UF_PROVA")["SG_UF_RESIDENCIA"].value_counts()

len(alunos_menor_quinze)

import seaborn as sns
import matplotlib.pyplot as plt # para manipular tamanho, label, títulos e cores dos gráficos

plt.figure(figsize=(10,8))
# relação de renda familiar (Q006) com as notas de matemática (NU_NOTA_MT)
sns.boxplot(x="Q006", y = "NU_NOTA_MT", data = dados)

# para ordenar o eixo X
faixa_renda_ordenada = dados["Q006"].unique()
faixa_renda_ordenada.sort()
print(faixa_renda_ordenada)

plt.figure(figsize=(10,6))
# relação de renda familiar (Q006) com as notas de matemática (NU_NOTA_MT)
sns.boxplot(x="Q006", y = "NU_NOTA_MT", data = dados, order = faixa_renda_ordenada)
plt.title("Relação renda familiar e notas de matemática - ENEN 2019")

# soma das notas para plotar um gráfico com a nota total X renda familiar
# para isso, vamos usar a variável que armazena o nome das colunas de notas apenas para facilitar o uso do df
# para somar as linhas (as notas de cada inscrito) é necessário usar o axis, que significa eixo. axis = 0 (Eixo Coluna) e axis = 1 (Eixo Linha)
dados[provas].sum(axis=1)

# adicionar essa soma em uma coluna nova no df
dados["NU_NOTA_TOTAL"] = dados[provas].sum(axis=1)
dados.head()

plt.figure(figsize=(10,6))
# relação de renda familiar (Q006) com a nota total (NU_NOTA_TOTAL)
sns.boxplot(x="Q006", y = "NU_NOTA_TOTAL", data = dados, order = faixa_renda_ordenada)
plt.title("Relação renda familiar e notas totais - ENEN 2019")

sns.displot(dados, x = "NU_NOTA_TOTAL")

# inclusão da coluna NU_NOTA_TOTAL na lista de cabeçalhos
provas.append("NU_NOTA_TOTAL")
dados[provas].query("NU_NOTA_TOTAL == 0")

"""É possível verificar que a quantidade de notas zero destoa o gráfico. Essas notas zeradas podem ser por causa de ausência dos inscritos em todos ou pelo menos um dia das provas."""

dados.query("TP_PRESENCA_CN == 1 and TP_PRESENCA_CH == 1 and TP_PRESENCA_LC == 1 and TP_PRESENCA_MT == 1")["NU_NOTA_TOTAL"]

dados_sem_notas_zero = dados.query("NU_NOTA_TOTAL != 0")
dados_sem_notas_zero.head()

plt.figure(figsize=(10,6))
# relação de renda familiar (Q006) com nota total (NU_NOTA_TOTAL)
sns.boxplot(x="Q006", y = "NU_NOTA_TOTAL", data = dados_sem_notas_zero, order = faixa_renda_ordenada)
plt.title("Relação renda familiar e notas totais (Sem notas zeradas) - ENEN 2019")

plt.figure(figsize=(14,8))
# relação de renda familiar (Q006) com nota total (NU_NOTA_TOTAL)
sns.boxplot(x="Q006", y = "NU_NOTA_TOTAL", data = dados_sem_notas_zero, hue="IN_TREINEIRO", order = faixa_renda_ordenada)
plt.title("Relação renda familiar e notas totais (Sem notas zeradas) - ENEN 2019")

"""---
# Desafios

MEGA DESAFIO DA THAINÁ: Pegar o arquivo completo dos alunos de 13 e 14 anos:
  - percentual por UF

Desafio do Gui: Aumentar a amostra para alunos menores de idade (até 17 anos) e comparar a proporção por UF

Desafio 03: Criar uma função para plotar o boxplot do seanborn

Desafio 04: Verificar se quem zerou a prova foi eliminado ou não estava presente

Desafio 05: Quem é eliminado tira zero ou será NaN - Not a umber (Não teve registro de notas)

Desafio 06: Verificar a proporção dos participantes de rendas mais altas e mais baixas como treineiro e não treineiro. (Tem mais treineiros na faixa de pessoas com rendas mais altas?)

Desafio 07: Fazer o mesmo boxplot olhando para a questão 25 (tem internet ou não) e fazer uma reflexão sobre o assunto e o contexto de pandemia) (Verificar se as notas variam com relação ao uso de internet ou não - pessoas que tem acesso a internet com relação a nota (Q025).

---
"""

#  MEGA DESAFIO DA THAINÁ
fonte_completa = "/content/MICRODADOS_ENEM_2019.csv"

dados_comp = pd.read_csv(fonte_completa)
dados_comp.head()

#  Continuação MEGA DESAFIO DA THAINÁ
#  Quantidade de adolescentes menores de 15 anos por UF (não usar um gráfico de pizza, pois a visualização não é boa)
alunos_menor_quinze_comp = dados_comp.query("NU_IDADE <= 14")
pl.suptitle("Percentual de adolescentes menores de 15 anos por UF - ENEM 2019")
alunos_menor_quinze_comp["SG_UF_RESIDENCIA"].value_counts(normalize=True).plot.bar(figsize=(10,8))

#  Desafio 03: Criar uma função para plotar o boxplot do seanborn
def plotarGrafico(titulo, x, y, df, ordenacao, matiz):
  plt.figure(figsize=(14,8))
  # relação de renda familiar (Q006) com nota total (NU_NOTA_TOTAL)
  sns.boxplot(x=x, y = y, data =df, order = ordenacao, hue = matiz)
  plt.title(titulo)

titulo = "Relação renda familiar e notas totais (Sem notas zeradas) - ENEN 2019"
X = "Q006"
Y = "NU_NOTA_TOTAL"
matiz = None
plotarGrafico(titulo,
              X,
              Y,
              dados_sem_notas_zero,
              faixa_renda_ordenada,
              matiz)

#  DESAFIO 04: Verificar se quem zerou a prova foi eliminado ou não estava presente

#dados.query("(TP_PRESENCA_CN == 1 or TP_PRESENCA_CH == 1 or TP_PRESENCA_LC == 1 or TP_PRESENCA_MT == 1) and NU_NOTA_TOTAL == 0")[provas]
presenca = ['TP_PRESENCA_CN', 'TP_PRESENCA_CH', 'TP_PRESENCA_LC', 'TP_PRESENCA_MT']
dados.query("NU_NOTA_TOTAL == 0")[presenca].value_counts()

# DESAFIO 06: Verificar a proporção dos participantes de rendas mais altas e mais baixas como treineiro e não treineiro. (Tem mais treineiros na faixa de pessoas com rendas mais altas?)
# relação de renda familiar (Q006) com treineiros (IN_TREINEIRO)
dados.query("IN_TREINEIRO == 1")["Q006"].value_counts().sort_index().plot.bar()

''' Desafio 07: Fazer o mesmo boxplot olhando para a questão 25 (tem internet ou não) e fazer uma reflexão 
    sobre o assunto e o contexto de pandemia) (Verificar se as notas variam com relação ao uso de internet 
    ou não - pessoas que tem acesso a internet com relação a nota (Q025).
'''
titulo = "Relação Acesso a internet e notas totais (Sem notas zeradas) - ENEN 2019"
X = "Q025"
Y = "NU_NOTA_TOTAL"
plotarGrafico(titulo,
              X,
              Y,
              dados_sem_notas_zero,
              None, 
              X)

"""É possível perceber que há uma diferença nas notas: as notas são mais altas quando os inscritos têm acesso à internet.
A - sem acesso na residência. B - com acesso na residência.
"""